name: CI

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master

jobs:
  build-windows-minimal:
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Compile without backend
        run: |
          cmake -DWITH_MKL=OFF -DOPENMP_RUNTIME=NONE .
          cmake --build .


  build-and-test-cpp-x86_64:
    runs-on: ${{ matrix.os }}
    env:
      CT2_VERBOSE: 1
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-10.15]
        backend: [mkl, dnnl]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Intel oneAPI
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo apt-key add *.PUB
          sudo sh -c 'echo "deb https://apt.repos.intel.com/oneapi all main" > /etc/apt/sources.list.d/oneAPI.list'
          sudo apt-get update

      - name: Store URL for downloading Intel oneAPI to environment variable
        if: startsWith(matrix.os, 'macos')
        run: |
          echo 'ONEAPI_INSTALLER_URL=https://registrationcenter-download.intel.com/akdlm/irc_nas/17426/m_BaseKit_p_2021.1.0.2427_offline.dmg' >> $GITHUB_ENV

      - name: Install Intel oneAPI
        if: startsWith(matrix.os, 'macos')
        run: |
          wget -q $ONEAPI_INSTALLER_URL
          hdiutil attach -noverify -noautofsck $(basename $ONEAPI_INSTALLER_URL)

      - name: Install libomp
        if: startsWith(matrix.os, 'macos')
        run: brew install libomp

      - name: Configure with MKL
        if: startsWith(matrix.os, 'ubuntu') && matrix.backend == 'mkl'
        run: |
          sudo apt-get install -y intel-oneapi-mkl-devel
          cmake -DCMAKE_INSTALL_PREFIX=$PWD/install -DWITH_TESTS=ON .

      - name: Configure with DNNL
        if: startsWith(matrix.os, 'ubuntu') && matrix.backend == 'dnnl'
        run: |
          sudo apt-get install -y intel-oneapi-dnnl-devel
          cmake -DCMAKE_INSTALL_PREFIX=$PWD/install -DWITH_TESTS=ON -DWITH_MKL=OFF -DOPENMP_RUNTIME=COMP -DWITH_DNNL=ON .

      - name: Configure with MKL
        if: startsWith(matrix.os, 'macos') && matrix.backend == 'mkl'
        run: |
          sudo /Volumes/$(basename $ONEAPI_INSTALLER_URL .dmg)/bootstrapper.app/Contents/MacOS/bootstrapper --silent --eula accept --components intel.oneapi.mac.mkl.devel
          cmake -DCMAKE_INSTALL_PREFIX=$PWD/install -DWITH_TESTS=ON -DCMAKE_CXX_FLAGS="-Wno-unused-command-line-argument" .

      - name: Configure with DNNL
        if: startsWith(matrix.os, 'macos') && matrix.backend == 'dnnl'
        run: |
          sudo /Volumes/$(basename $ONEAPI_INSTALLER_URL .dmg)/bootstrapper.app/Contents/MacOS/bootstrapper --silent --eula accept --components intel.oneapi.mac.dnnl
          sudo install_name_tool -id @rpath/libdnnl.2.dylib /opt/intel/oneapi/dnnl/latest/cpu_iomp/lib/libdnnl.2.0.dylib
          cmake -DCMAKE_INSTALL_PREFIX=$PWD/install -DWITH_TESTS=ON -DWITH_MKL=OFF -DWITH_DNNL=ON -DCMAKE_CXX_FLAGS="-Wno-unused-command-line-argument" .

      - name: Build
        run: |
          make install

      - name: Download test data
        run: |
          wget https://opennmt-models.s3.amazonaws.com/transliteration-aren-all.tar.gz
          tar xf transliteration-aren-all.tar.gz -C tests/data/models/

      - name: Test
        run: |
          tests/ctranslate2_test tests/data


  build-and-test-cpp-aarch64:
    runs-on: ubuntu-20.04
    env:
      CT2_VERBOSE: 1
    strategy:
      matrix:
        backend: [openblas, dnnl]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install cross compiler and emulator
        run: sudo apt-get install -y g++-aarch64-linux-gnu gfortran-aarch64-linux-gnu qemu-user-static

      - name: Build with OpenBLAS
        if: matrix.backend == 'openblas'
        run: |
          wget https://github.com/xianyi/OpenBLAS/archive/v0.3.13.tar.gz
          tar xzvf v0.3.13.tar.gz
          cd OpenBLAS-0.3.13
          make TARGET=ARMV8 CC=aarch64-linux-gnu-gcc FC=aarch64-linux-gnu-gfortran HOSTCC=gcc NO_LAPACK=1 -j $(nproc)
          sudo make PREFIX=/usr/aarch64-linux-gnu install
          cd ..

          cmake \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
            -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-linux-gnu \
            -DOPENMP_RUNTIME=COMP \
            -DCMAKE_INSTALL_PREFIX=$PWD/install \
            -DWITH_MKL=OFF \
            -DWITH_OPENBLAS=ON \
            -DWITH_TESTS=ON \
            .
          make -j $(nproc) install

      - name: Build with DNNL
        if: matrix.backend == 'dnnl'
        run: |
          wget https://github.com/oneapi-src/oneDNN/archive/v1.7.tar.gz
          tar xzvf v1.7.tar.gz
          cd oneDNN-1.7
          cmake \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
            -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-linux-gnu \
            -DCMAKE_INSTALL_PREFIX=/usr/aarch64-linux-gnu \
            -DDNNL_TARGET_ARCH="AARCH64" \
            -DDNNL_CPU_RUNTIME=OMP \
            -DDNNL_BUILD_TESTS=OFF \
            .
          make -j $(nproc)
          sudo make install
          cd ..

          cmake \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
            -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-linux-gnu \
            -DOPENMP_RUNTIME=COMP \
            -DCMAKE_INSTALL_PREFIX=$PWD/install \
            -DWITH_MKL=OFF \
            -DWITH_DNNL=ON \
            -DWITH_TESTS=ON \
            .
          make -j $(nproc) install

      - name: Download test data
        run: |
          wget https://opennmt-models.s3.amazonaws.com/transliteration-aren-all.tar.gz
          tar xf transliteration-aren-all.tar.gz -C tests/data/models/

      - name: Test
        run: |
          tests/ctranslate2_test tests/data
        env:
          QEMU_LD_PREFIX: /usr/aarch64-linux-gnu


  build-and-test-python-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-10.15]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Build wheels
        run: |
          python -m pip install cibuildwheel==1.7.4
          python -m cibuildwheel python --output-dir python/wheelhouse
        env:
          CIBW_BEFORE_ALL_LINUX: python/tools/prepare_build_environment_linux.sh
          CIBW_BEFORE_ALL_MACOS: python/tools/prepare_build_environment_macos.sh
          CIBW_BEFORE_BUILD: pip install -r python/install_requirements.txt
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_BEFORE_TEST: python/tools/prepare_test_environment.sh
          CIBW_TEST_COMMAND: '{project}/python/tools/run_test.sh {project}'
          CIBW_SKIP: cp27-* pp* *i686

      - name: Upload Python wheels
        uses: actions/upload-artifact@v2
        with:
          name: python-wheels
          path: python/wheelhouse


  check-python-style:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Install dependencies
        run: |
          python -m pip install black==20.8b1 flake8==3.8.*

      - name: Check code format with Black
        working-directory: python
        run: |
          black --check .

      - name: Check code style with Flake8
        working-directory: python
        if: ${{ always() }}
        run: |
          flake8 .


  publish-python-wheels-on-pypi:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: [build-and-test-cpp-x86_64, build-and-test-python-wheels, check-python-style]
    runs-on: ubuntu-18.04

    steps:
      - name: Download Python wheels
        uses: actions/download-artifact@v2
        with:
          name: python-wheels

      - name: Publish Python wheels to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: ${{ secrets.PYPI_USERNAME }}
          password: ${{ secrets.PYPI_PASSWORD }}
          packages_dir: .
